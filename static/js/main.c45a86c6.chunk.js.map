{"version":3,"sources":["components/CityInput/index.js","components/CityWeather/index.js","App.js","reportWebVitals.js","index.js"],"names":["CityInput","city","setCity","fetchCityWeather","React","useState","error","setError","Form","Group","controlId","Label","Control","value","type","onChange","e","target","className","Button","variant","onClick","CityWeather","cityWeather","temp","temp_max","temp_min","toFixed","App","setCityWeather","fetch","then","response","json","result","console","log","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRA2CeA,EAvCG,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,iBAAuB,EAC/BC,IAAMC,SAAS,IADgB,mBAClDC,EADkD,KAC3CC,EAD2C,KAgBzD,OACE,cAACC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACE,cAACF,EAAA,EAAKG,MAAN,IACA,cAACH,EAAA,EAAKI,QAAN,CACEC,MAAOZ,EACPa,KAAK,OACLC,SApBkB,SAACC,GACzBd,EAAQc,EAAEC,OAAOJ,QAoBXK,UAAU,eAEZ,mBAAGA,UAAU,cAAb,SAA4BZ,IAC5B,cAACa,EAAA,EAAD,CACEC,QAAQ,UACRC,QAtBa,WACdpB,GAGHM,EAAS,IAETJ,KAJAI,EAAS,wBAqBLW,UAAU,eAHZ,0BChBOI,G,MAZK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACdC,EAA6BD,EAA7BC,KAAMC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SAEvB,OACE,sBAAKR,UAAU,cAAf,UACE,gDAAmBM,EAAO,KAAKG,QAAQ,GAAvC,cACA,yCAAYF,EAAW,KAAKE,QAAQ,GAApC,cACA,yCAAYD,EAAW,KAAKC,QAAQ,GAApC,mBCsBSC,G,MA5BH,WAAO,IAAD,EACQxB,IAAMC,SAAS,IADvB,mBACTJ,EADS,KACHC,EADG,OAEsBE,IAAMC,SAAS,IAFrC,mBAETkB,EAFS,KAEIM,EAFJ,KAehB,OACE,qCACE,cAAC,EAAD,CACE5B,KAAMA,EACNC,QAASA,EACTC,iBAhBmB,WACvB2B,MAAM,oDAAD,OACiD7B,EADjD,4CAGF8B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLC,QAAQC,IAAIF,EAAOG,MAEnBR,EAAeK,EAAOG,UAStBnB,UAAU,eAEZ,cAAC,EAAD,CAAaK,YAAaA,SCfjBe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c45a86c6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport \"./styles.css\";\r\nconst CityInput = ({ city, setCity, fetchCityWeather }) => {\r\n  const [error, setError] = React.useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    setCity(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    if (!city) {\r\n      setError(\"City field is empty\");\r\n    } else {\r\n      setError(\"\");\r\n\r\n      fetchCityWeather();\r\n    }\r\n  };\r\n  return (\r\n    <Form>\r\n      <Form.Group controlId=\"formBasicEmail\">\r\n        <Form.Label></Form.Label>\r\n        <Form.Control\r\n          value={city}\r\n          type=\"text\"\r\n          onChange={handleInputChange}\r\n          className=\"inputField\"\r\n        />\r\n        <p className=\"text-danger\">{error}</p>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={handleSubmit}\r\n          className=\"submitButton\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default CityInput;\r\n","import React from \"react\";\r\nimport \"./styles.css\";\r\n\r\nconst CityWeather = ({ cityWeather }) => {\r\n  const {temp, temp_max, temp_min } = cityWeather;\r\n\r\n  return (\r\n    <div className=\"cityWeather\">\r\n      <div>Temprature: {(temp - 271).toFixed(2)} °Cel</div>\r\n      <div>Max: {(temp_max - 271).toFixed(2)} °Cel</div>\r\n      <div>Min: {(temp_min - 271).toFixed(2)} °Cel</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityWeather;\r\n","import React from \"react\";\nimport CityInput from \"./components/CityInput\";\nimport CityWeather from \"./components/CityWeather\";\nimport \"./App.css\";\nconst App = () => {\n  const [city, setCity] = React.useState(\"\");\n  const [cityWeather, setCityWeather] = React.useState({});\n  // const [render,setRender] = React.useState(false);\n  const fetchCityWeather = () => {\n    fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=4c496af33d732297c30b641b3b235e47`\n    )\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(result.main);\n        // setRender(true);\n        setCityWeather(result.main);\n      });\n  };\n  return (\n    <>\n      <CityInput\n        city={city}\n        setCity={setCity}\n        fetchCityWeather={fetchCityWeather}\n        className=\"inputField\"\n      />\n      <CityWeather cityWeather={cityWeather} />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}